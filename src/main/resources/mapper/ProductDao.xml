<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.financial_system.dao.ProductDao">

    <resultMap type="com.example.financial_system.entity.Product" id="ProductMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="providerId" column="provider_id" jdbcType="INTEGER"/>
        <result property="productTypeId" column="product_type_id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="duration" column="duration" jdbcType="VARCHAR"/>
        <result property="rateOfReturn" column="rate_of_return" jdbcType="NUMERIC"/>
        <result property="totalAmount" column="total_amount" jdbcType="INTEGER"/>
        <result property="remainAmout" column="remain_amout" jdbcType="NUMERIC"/>
        <result property="startUpAmount" column="start_up_amount" jdbcType="NUMERIC"/>
        <result property="riskLevel" column="risk_level" jdbcType="INTEGER"/>
        <result property="storageRemarks" column="storage_remarks" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="INTEGER"/>
        <result property="storageTime" column="storage_time" jdbcType="TIMESTAMP"/>
        <result property="addedTime" column="added_time" jdbcType="TIMESTAMP"/>
        <result property="reviewOperatorId" column="review_operator_id" jdbcType="INTEGER"/>
        <result property="reviewResult" column="review_result" jdbcType="BOOLEAN"/>
        <result property="reviewRemarks" column="review_remarks" jdbcType="VARCHAR"/>
    </resultMap>
    
    <sql id="base_column_list">
        id, provider_id, product_type_id, name, duration, rate_of_return, total_amount, remain_amout, start_up_amount, risk_level, storage_remarks, state, storage_time, added_time, review_operator_id, review_result, review_remarks    </sql>

    <!--查询单个-->
    <select id="queryById" resultMap="ProductMap">
        select
        <include refid="base_column_list" />
        
        from financial_system.product
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="ProductMap">
        select
        <include refid="base_column_list" />

        from financial_system.product
        limit #{offset}, #{limit}
    </select>

    <!--查询所有-->
    <select id="queryAll" resultMap="ProductMap">
        select
        <include refid="base_column_list" />

        from financial_system.product
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into financial_system.product(provider_id, product_type_id, name, duration, rate_of_return, risk_level)
        values (#{providerId}, #{productTypeId}, #{name}, #{duration}, #{rateOfReturn}, #{riskLevel})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update financial_system.product
        <set>
            <if test="providerId != null">
                provider_id = #{providerId},
            </if>
            <if test="productTypeId != null">
                product_type_id = #{productTypeId},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="duration != null and duration != ''">
                duration = #{duration},
            </if>
            <if test="rateOfReturn != null">
                rate_of_return = #{rateOfReturn},
            </if>
            <if test="riskLevel != null">
                risk_level = #{riskLevel},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from financial_system.product where id = #{id}
    </delete>
    
    <!--选择性的新增列-->
    <insert id="insertSelective" keyProperty="id" useGeneratedKeys="true">
        insert into financial_system.product
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="providerId != null">
                provider_id,
            </if>
            <if test="productTypeId != null">
                product_type_id,
            </if>
            <if test="name != null and name != ''">
                name,
            </if>
            <if test="duration != null and duration != ''">
                duration,
            </if>
            <if test="rateOfReturn != null">
                rate_of_return,
            </if>
            <if test="riskLevel != null">
                risk_level,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="providerId != null">
                #{providerId},
            </if>
            <if test="productTypeId != null">
                #{productTypeId},
            </if>
            <if test="name != null and name != ''">
                #{name},
            </if>
            <if test="duration != null and duration != ''">
                #{duration},
            </if>
            <if test="rateOfReturn != null">
                #{rateOfReturn},
            </if>
            <if test="riskLevel != null">
                #{riskLevel},
            </if>
        </trim>        
    </insert>

</mapper>